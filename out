Let read_list
VAL
	Lambda
	Formal:
		n
	Body:
		Let val
		VAL
			readInt
		BODY
			BRANCH
			Predicate:
				BINOP: =
					n
					INT: 1
			Then branch:
				val
			Else Branch:
				Let rest
				VAL
					EXP LIST
						read_list
						BINOP: -
							n
							INT: 1
				BODY
					BINOP: @
						val
						rest
BODY
	Let _
	VAL
		UNOP: print
			STRING: "Enter number of integers in list"
	BODY
		Let num
		VAL
			readInt
		BODY
			Let _
			VAL
				UNOP: print
					STRING: "Please enter the list values:"
			BODY
				Let l
				VAL
					EXP LIST
						read_list
						num
				BODY
					Let _
					VAL
						UNOP: print
							STRING: "List entered"
					BODY
						Let _
						VAL
							UNOP: print
								l
						BODY
							Let _
							VAL
								UNOP: print
									STRING: "Adding 2 to each element: "
							BODY
								Let add
								VAL
									Lambda
									Formal:
										l
									Body:
										Lambda
										Formal:
											n
										Body:
											BRANCH
											Predicate:
												UNOP: IsNil
													UNOP: #
														l
											Then branch:
												BINOP: +
													l
													n
											Else Branch:
												Let hd
												VAL
													UNOP: !
														l
												BODY
													Let tl
													VAL
														UNOP: #
															l
													BODY
														BINOP: @
															BINOP: +
																hd
																n
															EXP LIST
																add
																tl
																n
								BODY
									EXP LIST
										add
										l
										INT: 2

- evaluating let read_list = lambda n. let val = readInt in (if (n = 1) then val else let rest = (read_list (n - 1)) in (val @ rest)) in let _ = (print"Enter number of integers in list") in let num = readInt in let _ = (print"Please enter the list values:") in let l = (read_list num) in let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating read_list
+ evaluated to read_list with type VariableType(read_list)
- evaluating let val = readInt in (if (n = 1) then val else let rest = (read_list (n - 1)) in (val @ rest))
- evaluating val
+ evaluated to val with type VariableType(val)
- evaluating readInt
+ evaluated to readInt with type ConstantType(Int)
unifying VariableType(val) with ConstantType(Int)
reps: VariableType(val) with ConstantType(Int)
- evaluating (if (n = 1) then val else let rest = (read_list (n - 1)) in (val @ rest))
- evaluating (n = 1)
- evaluating n
+ evaluated to n with type VariableType(v1)
- evaluating 1
+ evaluated to 1 with type ConstantType(Int)
unifying VariableType(v1) with ConstantType(Int)
reps: VariableType(v1) with ConstantType(Int)
+ evaluated to (n = 1) with type ConstantType(Int)
unifying ConstantType(Int) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating val
+ evaluated to val with type VariableType(val)
- evaluating let rest = (read_list (n - 1)) in (val @ rest)
- evaluating rest
+ evaluated to rest with type VariableType(rest)
- evaluating (read_list (n - 1))
- evaluating read_list
+ evaluated to read_list with type VariableType(read_list)
- evaluating (n - 1)
- evaluating n
+ evaluated to n with type VariableType(v1)
- evaluating 1
+ evaluated to 1 with type ConstantType(Int)
unifying VariableType(v1) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
unifying ConstantType(Int) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
unifying VariableType(v1) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
+ evaluated to (n - 1) with type ConstantType(Int)
unifying VariableType(read_list) with read_list(ConstantType(Int), VariableType(read_list'))
reps: VariableType(read_list) with read_list(ConstantType(Int), VariableType(read_list'))
+ evaluated to (read_list (n - 1)) with type VariableType(read_list')
unifying VariableType(rest) with VariableType(read_list')
reps: VariableType(rest) with VariableType(read_list')
- evaluating (val @ rest)
- evaluating val
+ evaluated to val with type VariableType(val)
- evaluating rest
+ evaluated to rest with type VariableType(rest)
+ evaluated to (val @ rest) with type [VariableType(val), VariableType(rest)]
+ evaluated to (val @ rest) with type [VariableType(val), VariableType(rest)]
+ evaluated to (if (n = 1) then val else let rest = (read_list (n - 1)) in (val @ rest)) with type [ConstantType(Int), AlphaType]
+ evaluated to (if (n = 1) then val else let rest = (read_list (n - 1)) in (val @ rest)) with type [ConstantType(Int), AlphaType]
unifying VariableType(read_list') with [ConstantType(Int), AlphaType]
reps: VariableType(rest) with [ConstantType(Int), AlphaType]
unifying VariableType(read_list) with read_list(VariableType(v1), VariableType(read_list'))
reps: VariableType(read_list) with read_list(VariableType(v1), VariableType(read_list'))
- evaluating let _ = (print"Enter number of integers in list") in let num = readInt in let _ = (print"Please enter the list values:") in let l = (read_list num) in let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating _
+ evaluated to _ with type VariableType(_)
- evaluating (print"Enter number of integers in list")
- evaluating "Enter number of integers in list"
+ evaluated to "Enter number of integers in list" with type ConstantType(String)
+ evaluated to (print"Enter number of integers in list") with type ConstantType(Int)
unifying VariableType(_) with ConstantType(Int)
reps: VariableType(_) with ConstantType(Int)
- evaluating let num = readInt in let _ = (print"Please enter the list values:") in let l = (read_list num) in let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating num
+ evaluated to num with type VariableType(num)
- evaluating readInt
+ evaluated to readInt with type ConstantType(Int)
unifying VariableType(num) with ConstantType(Int)
reps: VariableType(num) with ConstantType(Int)
- evaluating let _ = (print"Please enter the list values:") in let l = (read_list num) in let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating _
+ evaluated to _ with type VariableType(_)
- evaluating (print"Please enter the list values:")
- evaluating "Please enter the list values:"
+ evaluated to "Please enter the list values:" with type ConstantType(String)
+ evaluated to (print"Please enter the list values:") with type ConstantType(Int)
unifying VariableType(_) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating let l = (read_list num) in let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating l
+ evaluated to l with type VariableType(l)
- evaluating (read_list num)
- evaluating read_list
+ evaluated to read_list with type VariableType(read_list)
- evaluating num
+ evaluated to num with type VariableType(num)
unifying VariableType(read_list) with read_list(VariableType(num), VariableType(read_list'))
reps: read_list(VariableType(v1), VariableType(read_list')) with read_list(VariableType(num), VariableType(read_list'))
unifying VariableType(v1) with VariableType(num)
reps: ConstantType(Int) with ConstantType(Int)
unifying VariableType(read_list') with VariableType(read_list')
reps: [ConstantType(Int), AlphaType] with [ConstantType(Int), AlphaType]
+ evaluated to (read_list num) with type VariableType(read_list')
unifying VariableType(l) with VariableType(read_list')
reps: VariableType(l) with [ConstantType(Int), AlphaType]
- evaluating let _ = (print"List entered") in let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating _
+ evaluated to _ with type VariableType(_)
- evaluating (print"List entered")
- evaluating "List entered"
+ evaluated to "List entered" with type ConstantType(String)
+ evaluated to (print"List entered") with type ConstantType(Int)
unifying VariableType(_) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating let _ = (printl) in let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating _
+ evaluated to _ with type VariableType(_)
- evaluating (printl)
- evaluating l
+ evaluated to l with type VariableType(l)
+ evaluated to (printl) with type ConstantType(Int)
unifying VariableType(_) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating let _ = (print"Adding 2 to each element: ") in let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating _
+ evaluated to _ with type VariableType(_)
- evaluating (print"Adding 2 to each element: ")
- evaluating "Adding 2 to each element: "
+ evaluated to "Adding 2 to each element: " with type ConstantType(String)
+ evaluated to (print"Adding 2 to each element: ") with type ConstantType(Int)
unifying VariableType(_) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating let add = lambda l. lambda n. (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) in (add l 2)
- evaluating add
+ evaluated to add with type VariableType(add)
- evaluating (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n)))
- evaluating (IsNil(#l))
- evaluating (#l)
- evaluating l
+ evaluated to l with type VariableType(v2)
+ evaluated to (#l) with type ConstantType(Nil)
+ evaluated to (IsNil(#l)) with type ConstantType(Int)
unifying ConstantType(Int) with ConstantType(Int)
reps: ConstantType(Int) with ConstantType(Int)
- evaluating (l + n)
- evaluating l
+ evaluated to l with type VariableType(v2)
- evaluating n
+ evaluated to n with type VariableType(v3)
unifying VariableType(v2) with VariableType(v3)
reps: VariableType(v2) with VariableType(v3)
+ evaluated to (l + n) with type VariableType(v2)
- evaluating let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))
- evaluating hd
+ evaluated to hd with type VariableType(hd)
- evaluating (!l)
- evaluating l
+ evaluated to l with type VariableType(v2)
+ evaluated to (!l) with type VariableType(v2)
unifying VariableType(hd) with VariableType(v2)
reps: VariableType(hd) with VariableType(v2)
- evaluating let tl = (#l) in ((hd + n) @ (add tl n))
- evaluating tl
+ evaluated to tl with type VariableType(tl)
- evaluating (#l)
- evaluating l
+ evaluated to l with type VariableType(v2)
+ evaluated to (#l) with type ConstantType(Nil)
unifying VariableType(tl) with ConstantType(Nil)
reps: VariableType(tl) with ConstantType(Nil)
- evaluating ((hd + n) @ (add tl n))
- evaluating (hd + n)
- evaluating hd
+ evaluated to hd with type VariableType(hd)
- evaluating n
+ evaluated to n with type VariableType(v3)
unifying VariableType(hd) with VariableType(v3)
reps: VariableType(hd) with VariableType(hd)
+ evaluated to (hd + n) with type VariableType(hd)
- evaluating (add tl n)
- evaluating add
+ evaluated to add with type VariableType(add)
- evaluating tl
+ evaluated to tl with type VariableType(tl)
- evaluating n
+ evaluated to n with type VariableType(v3)
unifying VariableType(add) with add(VariableType(tl), VariableType(v3), VariableType(add''))
reps: VariableType(add) with add(VariableType(tl), VariableType(v3), VariableType(add''))
+ evaluated to (add tl n) with type VariableType(add'')
+ evaluated to ((hd + n) @ (add tl n)) with type [VariableType(hd), VariableType(add'')]
+ evaluated to ((hd + n) @ (add tl n)) with type [VariableType(hd), VariableType(add'')]
+ evaluated to ((hd + n) @ (add tl n)) with type [VariableType(hd), VariableType(add'')]
+ evaluated to (if (IsNil(#l)) then (l + n) else let hd = (!l) in let tl = (#l) in ((hd + n) @ (add tl n))) with type AlphaType
unifying VariableType(add'') with AlphaType
reps: VariableType(add'') with AlphaType
unifying VariableType(add') with add'(VariableType(v3), VariableType(add''))
reps: VariableType(add') with add'(VariableType(v3), VariableType(add''))
unifying VariableType(add) with add(VariableType(v2), VariableType(add'))
reps: VariableType(add) with add(VariableType(v2), VariableType(add'))
- evaluating (add l 2)
- evaluating add
+ evaluated to add with type VariableType(add)
- evaluating l
+ evaluated to l with type VariableType(v2)
- evaluating 2
+ evaluated to 2 with type ConstantType(Int)
unifying VariableType(add) with add(VariableType(v2), ConstantType(Int), VariableType(add''))
reps: add(VariableType(v2), VariableType(add')) with add(VariableType(v2), ConstantType(Int), VariableType(add''))
unifying VariableType(v2) with VariableType(v2)
reps: VariableType(hd) with VariableType(hd)
unifying VariableType(add') with rest(ConstantType(Int), VariableType(add''))
reps: add'(VariableType(v3), VariableType(add'')) with rest(ConstantType(Int), VariableType(add''))
unifying VariableType(v3) with ConstantType(Int)
reps: VariableType(hd) with ConstantType(Int)
unifying VariableType(add'') with VariableType(add'')
reps: AlphaType with AlphaType
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
+ evaluated to (add l 2) with type VariableType(add'')
final state of unification:
************* All current types ********************
ConstantType(Int) Representative: ConstantType(Int)
ConstantType(Nil) Representative: ConstantType(Nil)
ConstantType(String) Representative: ConstantType(String)
add(VariableType(v2), VariableType(add')) Representative: add(VariableType(v2), VariableType(add'))
add(VariableType(v2), ConstantType(Int), VariableType(add'')) Representative: add(VariableType(v2), ConstantType(Int), VariableType(add''))
add(VariableType(tl), VariableType(v3), VariableType(add'')) Representative: add(VariableType(tl), VariableType(v3), VariableType(add''))
add'(VariableType(v3), VariableType(add'')) Representative: add'(VariableType(v3), VariableType(add''))
read_list(VariableType(v1), VariableType(read_list')) Representative: read_list(VariableType(v1), VariableType(read_list'))
read_list(ConstantType(Int), VariableType(read_list')) Representative: read_list(ConstantType(Int), VariableType(read_list'))
read_list(VariableType(num), VariableType(read_list')) Representative: read_list(VariableType(num), VariableType(read_list'))
rest(ConstantType(Int), VariableType(add'')) Representative: rest(ConstantType(Int), VariableType(add''))
VariableType(_) Representative: ConstantType(Int)
VariableType(add) Representative: add(VariableType(v2), VariableType(add'))
VariableType(add') Representative: add'(VariableType(v3), VariableType(add''))
VariableType(add'') Representative: AlphaType
VariableType(hd) Representative: VariableType(hd)
VariableType(l) Representative: [ConstantType(Int), AlphaType]
VariableType(num) Representative: ConstantType(Int)
VariableType(read_list) Representative: read_list(VariableType(v1), VariableType(read_list'))
VariableType(read_list') Representative: [ConstantType(Int), AlphaType]
VariableType(rest) Representative: [ConstantType(Int), AlphaType]
VariableType(tl) Representative: ConstantType(Nil)
VariableType(v1) Representative: ConstantType(Int)
VariableType(v2) Representative: VariableType(hd)
VariableType(v3) Representative: VariableType(hd)
VariableType(val) Representative: ConstantType(Int)
[ConstantType(Int), AlphaType] Representative: [ConstantType(Int), AlphaType]
[VariableType(val), VariableType(rest)] Representative: [VariableType(val), VariableType(rest)]
[VariableType(hd), VariableType(add'')] Representative: [VariableType(hd), VariableType(add'')]
AlphaType Representative: AlphaType
AlphaType Representative: AlphaType
****************************************************
passed!
final type rep: AlphaType
